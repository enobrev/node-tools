{"version":3,"sources":["../src/Timer.js"],"names":["Timer","constructor","bReturnTimers","oTimers","oIndices","shouldReturnTimers","get","sLabel","length","aTimers","oReturn","range","count","average","timers","map","oTime","started","push","toObject","getAll","Object","keys","oTimer","find","start","stop"],"mappings":";;;;;;AASI;;;;;;AAEe,MAAMA,KAAN,CAAY;;AAKvBC,gBAAYC,gBAAyB,KAArC,EAA4C;AACxC,aAAKC,OAAL,GAAsB,EAAtB;AACA,aAAKC,QAAL,GAAsB,EAAtB;AACA,aAAKF,aAAL,GAAsBA,aAAtB;AACH;;AAED;;;;AAIAG,uBAAmBH,aAAnB,EAA2C;AACvC,aAAKA,aAAL,GAAqBA,aAArB;AACH;;AAEDI,QAAIC,MAAJ,EAAoB;AAChB,YAAI,KAAKJ,OAAL,CAAaI,MAAb,KAAwB,KAAKJ,OAAL,CAAaI,MAAb,EAAqBC,MAArB,GAA8B,CAA1D,EAA6D;AACzD,gBAAIC,UAAU,KAAKN,OAAL,CAAaI,MAAb,CAAd;AACA,gBAAIG,UAAqB;AACrBC,uBAAS,CADY;AAErBC,uBAAS,CAFY;AAGrBC,yBAAS;AAHY,aAAzB;;AAMA,gBAAI,KAAKX,aAAT,EAAwB;AACpBQ,wBAAQI,MAAR,GAAiB,EAAjB;AACH;;AAED;AACAL,oBAAQM,GAAR,CAAYC,SAAS;AACjB,oBAAIA,MAAMC,OAAN,EAAJ,EAAqB;AACjBP,4BAAQC,KAAR,IAAiBK,MAAML,KAAN,EAAjB;AACAD,4BAAQE,KAAR;;AAEA,wBAAI,KAAKV,aAAT,EAAwB;AACpBQ,gCAAQI,MAAR,CAAeI,IAAf,CAAoBF,MAAMG,QAAN,EAApB;AACH;AACJ;AACJ,aATD;;AAWAT,oBAAQG,OAAR,GAAkBH,QAAQC,KAAR,GAAgBD,QAAQE,KAA1C;;AAEA,mBAAOF,OAAP;AACH;AACJ;;AAEDU,aAAS;AACL,YAAIV,UAAU,EAAd;;AAEAW,eAAOC,IAAP,CAAY,KAAKnB,OAAjB,EAA0BY,GAA1B,CAA8BR,UAAU;AACpC,gBAAIgB,SAAS,KAAKjB,GAAL,CAASC,MAAT,CAAb;AACA,gBAAIgB,MAAJ,EAAY;AACRb,wBAAQH,MAAR,IAAkBgB,MAAlB;AACH;AACJ,SALD;;AAOA,eAAOb,OAAP;AACH;;AAEDc,SAAKjB,MAAL,EAAqB;AACjB,eAAO,KAAKJ,OAAL,CAAaI,MAAb,EAAqB,KAAKH,QAAL,CAAcG,MAAd,CAArB,CAAP;AACH;;AAEDkB,UAAMlB,MAAN,EAAsB;AAClB,YAAI,CAAC,KAAKJ,OAAL,CAAaI,MAAb,CAAL,EAA2B;AACvB,iBAAKJ,OAAL,CAAaI,MAAb,IAAuB,EAAvB;AACH;;AAED,YAAIS,QAAQ,yBAAeT,MAAf,CAAZ;AACA,aAAKJ,OAAL,CAAaI,MAAb,EAAqBW,IAArB,CAA0BF,KAA1B;AACA,aAAKZ,QAAL,CAAcG,MAAd,IAAwB,KAAKJ,OAAL,CAAaI,MAAb,EAAqBC,MAArB,GAA8B,CAAtD;;AAEA,eAAOQ,KAAP;AACH;;AAEDU,SAAKnB,MAAL,EAAqB;AACjB,cAAMS,QAAQ,KAAKQ,IAAL,CAAUjB,MAAV,CAAd;AACAS,cAAMU,IAAN;AACA,eAAOV,MAAML,KAAN,EAAP;AACH;AAnFsB;kBAANX,K","file":"Timer.js","sourcesContent":["    // @flow\n\n    type TimerInfo = {\n        range: number,\n        count: number,\n        average: number,\n        [timers: ?string]: Array<Object>\n    };\n\n    import TimeKeeper from './TimeKeeper';\n\n    export default class Timer {\n        oTimers:        {[label: string]: Array<TimeKeeper>};\n        oIndices:       {[label: string]: number};\n        bReturnTimers:  boolean;\n\n        constructor(bReturnTimers: boolean = false) {\n            this.oTimers        = {};\n            this.oIndices       = {};\n            this.bReturnTimers  = bReturnTimers;\n        }\n\n        /**\n         *\n         * @param {Boolean} bReturnTimers\n         */\n        shouldReturnTimers(bReturnTimers: boolean) {\n            this.bReturnTimers = bReturnTimers;\n        }\n\n        get(sLabel: string) {\n            if (this.oTimers[sLabel] && this.oTimers[sLabel].length > 0) {\n                let aTimers = this.oTimers[sLabel];\n                let oReturn: TimerInfo = {\n                    range:   0,\n                    count:   0,\n                    average: 0\n                };\n\n                if (this.bReturnTimers) {\n                    oReturn.timers = [];\n                }\n\n                /** @var TimeKeeper oTime */\n                aTimers.map(oTime => {\n                    if (oTime.started()) {\n                        oReturn.range += oTime.range();\n                        oReturn.count++;\n\n                        if (this.bReturnTimers) {\n                            oReturn.timers.push(oTime.toObject());\n                        }\n                    }\n                });\n\n                oReturn.average = oReturn.range / oReturn.count;\n\n                return oReturn;\n            }\n        }\n\n        getAll() {\n            let oReturn = { };\n\n            Object.keys(this.oTimers).map(sLabel => {\n                let oTimer = this.get(sLabel);\n                if (oTimer) {\n                    oReturn[sLabel] = oTimer;\n                }\n            });\n\n            return oReturn;\n        }\n\n        find(sLabel: string) {\n            return this.oTimers[sLabel][this.oIndices[sLabel]];\n        }\n\n        start(sLabel: string) {\n            if (!this.oTimers[sLabel]) {\n                this.oTimers[sLabel] = [];\n            }\n\n            let oTime = new TimeKeeper(sLabel);\n            this.oTimers[sLabel].push(oTime);\n            this.oIndices[sLabel] = this.oTimers[sLabel].length - 1;\n\n            return oTime;\n        }\n\n        stop(sLabel: string) {\n            const oTime = this.find(sLabel);\n            oTime.stop();\n            return oTime.range();\n        }\n    }"]}